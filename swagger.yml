openapi: 3.0.3
info:
  title: E-commerce project
  description: |-
    RESTful API with express for ecommerce
  contact:
    name: Santiago Sanchez
    email: santiago.hsv@gmail.com
  version: 1.0.0
servers:
  - url: http://localhost:8080/
tags:
  - name: User
    description: Login and Signup 
  - name: Products
    description: Find and edit products 
  - name: Cart
    description: Find and edit cart
paths:
  /auth/login:
    post:
      tags:
        - User
      summary: User login
      description: ''
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginInput'
        required: true
      responses:
        '200':
          description: Successful signup
          headers:
            auth-token:
              description: Authentication token (JWT))
              schema:
                type: string
          content:
            application/json:
              schema:
                type: string
                example: Welcome
        '404':
          description: Email address is already being used
        '401':
          description: Invalid Credentials
  /auth/signup:
    post:
      tags:
        - User
      summary: User signup
      description: ''
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupInput'
        required: true
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: string
                example: Welcome
        '404':
          description: Email address is already being used
  /api/productos:
    get:
      tags:
        - Products
      summary: Get all products 
      description: ''
      responses:
        '200':
          description: Successful request
          content:
            application/json:
             schema:
              type: array
              items:
                $ref: '#/components/schemas/Product' 
        '400':
          description: Invalid status value
    post:
      tags:
        - Products
      summary: Add new product 
      description: ''
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInput'
        required: true
      responses:
        '200':
          description: Successful request
          content:
            application/json:
             schema:
              type: array
              items:
                $ref: '#/components/schemas/Product' 
        '400':
          description: Invalid status value
      security:
        - jwt-auth:
            - write:products
            - read:products        
  /api/productos/{productID}:
    get:
      tags:
        - Products
      summary: Get product by ID 
      description: ''
      parameters:
        - name: productID
          in: path
          description: ID of the product to return
          required: true
          schema:
            type: string
            example: 62efb8fb7f5d38976514268f
      responses:
        '200':
          description: Successful request
          content:
            application/json:
             schema:
              $ref: '#/components/schemas/Product'                
        '400':
          description: ID not found
    put:
      tags:
        - Products
      summary: Update product propieties
      description: 'Update one or more product propieties'
      parameters:
        - name: productID
          in: path
          description: ID of the product to update
          required: true
          schema:
            type: string
            example: 62efb8fb7f5d38976514268f
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInput'
        required: true            
      responses:
        '200':
          description: Successful request
          content:
            application/json:
             schema:
              $ref: '#/components/schemas/Product'                
        '400':
          description: ID not found          
      security:
        - jwt-auth:
            - write:products
            - read:products      
  /api/product/category/{category}:
    get:
      tags:
        - Products
      summary: Get product by categories 
      description: ''
      parameters:
        - name: category
          in: path
          description: product category
          required: true
          schema:
            type: string
            example: Computers
      responses:
        '200':
          description: Successful request
          content:
            application/json:
             schema:
              type: array
              items:
                $ref: '#/components/schemas/Product'               
components:
  schemas:
    LoginInput:
      type: object
      properties:
        mail:
          type: string
          example: example@mail.com
        password:
          type: string
          example: acbd
    SignupInput:
      type: object
      properties:
        fistName:
          type: string
          example: Jimmy
        LastName:
          type: string
          example: Page
        mail:
          type: string
          example: jimmy-page@gmail.com
        password:
          type: string
          example: 1234         
    Product:
      type: object
      properties:
        _id:
          type: string
          example: 62efb8fb7f5d38976514268f
        name:
          type: string
          example: Lenovo ThinkBook
        category:
          type: string
          example: Computers
        price:
          type: number
          example: 1000       
        thumbnail:
          type: string
          example: imageURL
        stock:
          type: number
          example: 10
        createdAt:
          type: string
          example: 2022-08-07T13:07:07.330Z
        updatedAt:
          type: string
          example: 2022-08-07T13:07:07.330Z       
    ProductInput:
      type: object
      properties:
        name:
          type: string
          example: Lenovo ThinkBook
        category:
          type: string
          example: Computers
        price:
          type: number
          example: 1000       
        thumbnail:
          type: string
          example: imageURL
        stock:
          type: number
          example: 10
  securitySchemes:
    jwt-auth:
      type: apiKey
      name: auth-token
      in: header